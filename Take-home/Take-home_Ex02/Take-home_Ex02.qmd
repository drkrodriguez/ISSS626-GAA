---
title: "Discovering Impact of COVID-19 on Thai Tourism Economy"
author: "Federico Jose Rodriguez"
date: "Sep 23 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

(Exercise Summary)

# A. Getting Started

## A.1 Background

Tourism is a major industry in Thailand as it made up to 20% of their gross domestic product pre-pandemic. However, like the rest of the world, the industry has taken a hit with COVID-19 in 2020, and has slowly been recovering since 2021. Recent reports are stating that Thailand is already, but still, at 80% of its peak level in 2019.

While we speak about the industry in general, the state of tourism within Thailand, and their recovery status are not the same. For example, tourism revenues have been focused on Bangkok, Phuket and Chonburi pre-pandemic.

We are interested in understanding the state of tourism across Thailand with regards to its spatial distribution and time and space distributionâ€“ both in absolutes and in terms of the trend with respect to the pandemic.

## A.2 Objectives

For this study, we want to understand the state of tourism in Thailand at a provincial level, and answer the following questions:

1.  Are the key tourism indicators in Thailand (at a province level) independent from space and from space and time?

2.  If tourism or any tourism indicators are not independent, what are the clusters, outliers and emerging hotspots and coldspots?

We will use the appropriate packages in R in order to perform the different analysis (spatial and otherwise) to support our answers to the above questions.

## A.3 Data Sources

The following data sources are used for this analysis:

-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) from Kaggle covering the years 2019-2023 and are at province and month level across 8 indicators:

    1.  `no_tourist_all` - total number of domestic tourists

    2.  `no_tourist_foreign` - number of foreign tourists

    3.  `no_tourist_occupied` - number of hotel rooms occupied

    4.  `no_tourist_thai` - number of Thai tourists

    5.  `occupancy_rate` - the percentage of occupied travel accommodations

    6.  `revenue_all` - total tourism revenue, in THB

    7.  `revenue_foreign` - revenue generated by foreign tourists, in THB

    8.  `revenue_thai` - revenue generated by Thai tourists, in THB

-   [Thailand-Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) from Human Data Exchange in shapefile format

## A.4 Importing and Launching R Packages

For this study, the following R packages will be used. A description of the packages and the code, using `p_load()` of the **pacman** package, to import them is given below.

::: panel-tabset
#### Package Description

The loaded packages include:

-   **sf -** package for importing, managing and processing vector-based geospatial data

-   **tidyverse -** collection of packages for performing data importation, wrangling and visualization

-   **tmap -** package with functions for plotting cartographic quality maps

-   **sfdep** - for handling spatial data

-   **coorplot, ggpubr, heatmaply, factoextra** - packages for multivariate data visualization and analysis

-   **cluster, ClustGeo, NbClust** - packages for performing cluster analysis

#### Import Code

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse,
               ggpubr, heatmaply, factoextra,
               NbClust, cluster, ClustGeo)
```
:::

As we will be performing simulations in the analysis later, it is good practice to define a random seed to be used so that results are consistent for viewers of this report, and the results can be reproduced.

```{r}
set.seed(1234)
```

# B. Data Loading and Preparation

## B.1. Thailand Subnational Boundary, Provincial Level

We load the Thailand subnational administrative boundary shapefile into an R dataframe using `st_read()` from the sf package. We need to analyze at the provincial level so we will be using the files suffixed by "1".

```{r}
thai_sf <- st_read(dsn="data/geospatial", 
                   layer="tha_admbnda_adm1_rtsd_20220121")
```

The output states that the object is of multipolygon geometry type containing 77 features (records) across 16 fields. (columns) We can check the contents of the object using a number of methods. For the code chunk below, we use `glimpse()` which lists the columns, gives the data type and the first elements.

```{r}
glimpse(thai_sf)
```

For clarity, we can clean up this dataframe by:

1.  Keeping only relevant columns: The province name and code, geometry
2.  Renaming the columns: change ADM1 to Province

The following code chunk executes these steps by using `select()` for the first step and `rename()` for the second step. We again use `glimpse()` to give a preview of the dataset's columns.

```{r}
thai_sf <- thai_sf %>%
  select(ADM1_EN, ADM1_PCODE, geometry) %>%
  rename(Province = ADM1_EN, ProvCode = ADM1_PCODE)

glimpse(thai_sf)
```

We can check if there are any missing values by using `is.na()` and then check across each column using `colSums()` from **Base R**.

```{r}
colSums(is.na(thai_sf))
```

The output shows that there are no missing values for any of the retained columns.

Finally, we can quickly check if the object depicts Thailand properly by producing a quick map using `qtm()` from **tmap** package.

```{r}
qtm(thai_sf)
```

## B.2. Thailand Tourism Data by Province, Jan 2019 - Feb 2023

The code chunk below loads the tourism statistics data into a dataframe `tourism`. We use read_csv() to import the data from the file.

```{r}
tourism <- read_csv("data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv")
```

We can check the contents by using the code chunk below.

```{r}
tourism
```

The imported data contains 7 fields and 30,800 records at a province and month level.

Before we analyze the dataset, let use remove unnecessary columns and rename the column names, similar to the previous dataset, using the code chunk below. (by using `select()` and `rename()`)

```{r}
tourism <- tourism %>%
  select(date, province_eng, region_eng, variable, value) %>%
  rename(Date = date, Province = province_eng, Region = region_eng, Indicator = variable, Value = value)

head(tourism)
```

We have kept only five of the columns which provides the date, the English descriptions for the location (province and region) as well as the (potential) tourism indicator and its value.

We can also check for any missing values across these five columns using the code below. (using `is.na()` and `colSums()`)

```{r}
colSums(is.na(tourism))
```

We check the (WIP)
