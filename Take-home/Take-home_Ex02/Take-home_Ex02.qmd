---
title: "Discovering Impact of COVID-19 on Thai Tourism Economy"
author: "Federico Jose Rodriguez"
date: "Sep 23 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

(Exercise Summary)

# A. Getting Started

## A.1 Background

Tourism is a major industry in Thailand as it made up to 20% of their gross domestic product pre-pandemic. However, like the rest of the world, the industry has taken a hit with COVID-19 in 2020, and has slowly been recovering since 2021. Recent reports are stating that Thailand is already, but still, at 80% of its peak level in 2019.

While we speak about the industry in general, the state of tourism within Thailand, and their recovery status are not the same. For example, tourism revenues have been focused on Bangkok, Phuket and Chonburi pre-pandemic.

We are interested in understanding the state of tourism across Thailand with regards to its spatial distribution and time and space distributionâ€“ both in absolutes and in terms of the trend with respect to the pandemic.

## A.2 Objectives

For this study, we want to understand the state of tourism in Thailand at a provincial level, and answer the following questions:

1.  Are the key tourism indicators in Thailand (at a province level) independent from space and from space and time?

2.  If tourism or any tourism indicators are not independent, what are the clusters, outliers and emerging hotspots and coldspots?

We will use the appropriate packages in R in order to perform the different analysis (spatial and otherwise) to support our answers to the above questions.

## A.3 Data Sources

The following data sources are used for this analysis:

-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) from Kaggle covering the years 2019-2023 and are at province and month level across 8 indicators:

    1.  `no_tourist_all` - total number of domestic tourists

    2.  `no_tourist_foreign` - number of foreign tourists

    3.  `no_tourist_occupied` - number of hotel rooms occupied

    4.  `no_tourist_thai` - number of Thai tourists

    5.  `occupancy_rate` - the percentage of occupied travel accommodations

    6.  `revenue_all` - total tourism revenue, in M-THB (appears as net profit in the raw data)

    7.  `revenue_foreign` - revenue generated by foreign tourists, in M-THB (appears as net profit in the raw data)

    8.  `revenue_thai` - revenue generated by Thai tourists, in M-THB (appears as net profit in the raw data)

-   [Thailand-Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) from Human Data Exchange in shapefile format

## A.4 Importing and Launching R Packages

For this study, the following R packages will be used. A description of the packages and the code, using `p_load()` of the **pacman** package, to import them is given below.

::: panel-tabset
#### Package Description

The loaded packages include:

-   **sf -** package for importing, managing and processing vector-based geospatial data

-   **tidyverse -** collection of packages for performing data importation, wrangling and visualization

-   **tmap -** package with functions for plotting cartographic quality maps

-   **sfdep** - for handling spatial data

-   **coorplot, ggpubr, heatmaply, factoextra** - packages for multivariate data visualization and analysis

-   **cluster, ClustGeo, NbClust** - packages for performing cluster analysis

#### Import Code

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse,
               ggpubr, heatmaply, factoextra,
               NbClust, cluster, ClustGeo)
```
:::

As we will be performing simulations in the analysis later, it is good practice to define a random seed to be used so that results are consistent for viewers of this report, and the results can be reproduced.

```{r}
set.seed(1234)
```

# B. Data Loading and Preparation

## B.1. Thailand Subnational Boundary, Provincial Level

We load the Thailand subnational administrative boundary shapefile into an R dataframe using `st_read()` from the sf package. We need to analyze at the provincial level so we will be using the files suffixed by "1".

```{r}
thai_sf <- st_read(dsn="data/geospatial", 
                   layer="tha_admbnda_adm1_rtsd_20220121")
```

The output states that the object is of multipolygon geometry type containing 77 features (provinces, records) across 16 fields. (columns) We can check the contents of the object using a number of methods. For the code chunk below, we use `glimpse()` which lists the columns, gives the data type and the first elements.

```{r}
glimpse(thai_sf)
```

For clarity, we can clean up this dataframe by:

1.  Keeping only relevant columns: The province name and code, geometry
2.  Renaming the columns: change ADM1 to Province

The following code chunk executes these steps by using `select()` for the first step and `rename()` for the second step. We again use `glimpse()` to give a preview of the dataset's columns.

```{r}
thai_sf <- thai_sf %>%
  select(ADM1_EN, ADM1_PCODE, geometry) %>%
  rename(Province = ADM1_EN, ProvCode = ADM1_PCODE)

glimpse(thai_sf)
```

We can check if there are any missing values by using `is.na()` and then check across each column using `colSums()` from **Base R**.

```{r}
colSums(is.na(thai_sf))
```

The output shows that there are no missing values for any of the retained columns.

Finally, we can quickly check if the object depicts Thailand properly by producing a quick map using `qtm()` from **tmap** package.

```{r}
qtm(thai_sf)
```

## B.2. Thailand Tourism Data by Province, Jan 2019 - Feb 2023

The code chunk below loads the tourism statistics data into a dataframe `tourism`. We use read_csv() to import the data from the file.

```{r}
tourism <- read_csv("data/aspatial/thailand_domestic_tourism_2019_2023.csv")
```

We can check the contents by using the code chunk below.

```{r}
tourism
```

The imported data contains 7 fields and 30,800 records at a province and month level.

Before we analyze the dataset, let use remove unnecessary columns and rename the column names, similar to the previous dataset, using the code chunk below. (by using `select()` and `rename()`)

```{r}
tourism <- tourism %>%
  select(date, province_eng, region_eng, variable, value) %>%
  rename(Date = date, Province = province_eng, Region = region_eng, Indicator = variable, Value = value)

head(tourism)
```

We have kept only five of the columns which provides the date, the English descriptions for the location (province and region) as well as the (potential) tourism indicator and its value.

We can also check for any missing values across these five columns using the code below. (using `is.na()` and `colSums()`)

```{r}
colSums(is.na(tourism))
```

Each province will be repeated across multiple dates and across multiple indicators. Let us first doublecheck the different values in `Indicator`. We use `unique()` in the code chunk below to achieve this.

```{r}
unique(tourism$Indicator)
```

We are aware that the 'net_profit' indicators are actually revenue so it is better to update them now to avoid misunderstanding later. We use `recode()` from **dplyr** to replace instances with alternative values.

```{r}
tourism <- tourism %>%
  mutate(Indicator = recode(Indicator,
                            "net_profit_all" = "revenue_all",
                            "net_profit_thai" = "revenue_thai",
                            "net_profit_foreign" = "revenue_foreign"))

unique(tourism$Indicator)
```

We will not define which indicators to use until we perform some EDA (Exploratory Data Analysis) in the next section.

Before we move to the next section, we will also introduce some columns into the dataset to make filtering and other analysis easier. For now, we will do this by adding columns for the months and years based on the `Date` column.

```{r}
tourism <- tourism %>%
  mutate(Year = year(Date)) %>%
  mutate(MonthNum = month(Date)) %>%
  mutate(Month = month(Date, label = TRUE, abbr = TRUE)) %>%
  mutate(MonthYear = format(ymd(Date), "%Y-%m"))

head(tourism)
```

# C. Exploratory Data Analysis

We will use data analysis and visualization techniques to investigate the data before we perform the main analyses required. This allows us to get some insights on things like variables to use, provinces to focus on, deep dives to perform etc.

## C.1 Tourism Revenue

We first look at tourism revenue which is currently reported in million Thai baht. We will use a constant rate of 34.784 THB per USD based on 2023 exchange rates to scale down the numbers and transform it into something more recognizable for most of the readers.

We first create a plot for the monthly tourism revenue in total and by foreign and local tourists. The code below selects the relevant data and prepares the line plot using `ggplot()`. Finally, we use `ggplotly()` to render it as an interactive chart so we can easily examine the resulting chart.

```{r}
# Subset the data to just the required indicators
aggregated_data <- tourism %>%
  filter(Indicator %in% c("revenue_all", "revenue_thai", "revenue_foreign")) %>%
  group_by(MonthYear, Indicator) %>%
  summarise(TotalValue = sum(Value, na.rm = TRUE) / 34.784) %>%
  ungroup()

# Create the line chart
p <- ggplot(aggregated_data, aes(x = MonthYear, y = TotalValue, color = Indicator, group = Indicator)) +
  geom_line(size = 1) +
  labs(title = "Thai Tourism Revenue by Month",
       y = "Million USD",
       x = "Month-Year") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        legend.position = "bottom") +
  scale_color_manual(values = c("revenue_all" = "blue", "revenue_thai" = "green", "revenue_foreign" = "red"))

# Convert the ggplot chart to an interactive plotly chart
interactive_plot <- ggplotly(p)

# Display the interactive plot
interactive_plot
```

The resulting chart is consistent with the expectation on the impact and recovery from the pandemic. We can view the above chart as a timeline:

1.  Up to (mid)January 2020: Pre-covid. No travel restrictions have been set yet. (Jan 2019 - Jan 2020, 13 months)

2.  Feb 2020 to November 2021: Covid. Various lockdown measures in place. All foreign non-essential travel is banned. There is some local tourist activity, but another set of measures in May 2021 again prevents non-essential movement (Feb 2020 - Oct 2021, 22 months)

3.  November 2021 onwards: Post-Covid. Travel restrictions have been eased or lifted and tourism revenues have been recovering (Nov 2021 - Feb 2023, 16 months)

Pre- and post-covid, we see that foreign tourists contribute more to the overall revenue, and their contribution has a large amount of variance. Local tourists during the same period have contributed a more stable amount month-on-month. As there is lower contribution and less variance for local tourists, we will exclude them from the analysis, and focus on total and foreign numbers for now.

We can code the three periods mentioned above into the tourism dataset for convenience. We use the `ifelse()` function to do this based on the cutoff dates mentioned above.

```{r}
tourism$Period <- ifelse(tourism$Date < as.Date("2020-02-01"), "Pre-Covid",
                         ifelse(tourism$Date > as.Date("2021-10-01"), "Post-Covid", "Covid"))
```

We can next check the tourism revenue at the province level. As plotting all 77 provinces across all the periods will not produce readable charts, we will focus on top 20 provinces for the different periods. We will also take the average monthly revenue rather than the total since each period has a different number of months.

We prepare a new dataframe that summarizes the indicators for each province in `tourism`. Aside from the average revenue per period, we will also compute for the average number of visitors as well as the average spend per visitor.

```{r}
tourism_period <- tourism %>%
  group_by(Province) %>%
  summarise(
    PreCovid_Revenue_total = sum(Value[Period == "Pre-Covid" & Indicator == "revenue_all"], na.rm = TRUE)/13/34.784,
    Covid_Revenue_total = sum(Value[Period == "Covid" & Indicator == "revenue_all"], na.rm = TRUE)/22/34.784,
    PostCovid_Revenue_total = sum(Value[Period == "Post-Covid" & Indicator == "revenue_all"], na.rm = TRUE)/16/34.784,
    PreCovid_Revenue_foreign = sum(Value[Period == "Pre-Covid" & Indicator == "revenue_foreign"], na.rm = TRUE)/13/34.784,
    Covid_Revenue_foreign = sum(Value[Period == "Covid" & Indicator == "revenue_foreign"], na.rm = TRUE)/22/34.784,
    PostCovid_Revenue_foreign = sum(Value[Period == "Post-Covid" & Indicator == "revenue_foreign"], na.rm = TRUE)/16/34.784,
    PreCovid_tourists_total = sum(Value[Period == "Pre-Covid" & Indicator == "no_tourist_all"], na.rm = TRUE)/13,
    Covid_tourists_total = sum(Value[Period == "Covid" & Indicator == "no_tourist_all"], na.rm = TRUE)/22,
    PostCovid_tourists_total = sum(Value[Period == "Post-Covid" & Indicator == "no_tourist_all"], na.rm = TRUE)/16,
    PreCovid_tourists_foreign = sum(Value[Period == "Pre-Covid" & Indicator == "no_tourist_foreign"], na.rm = TRUE)/13,
    Covid_tourists_foreign = sum(Value[Period == "Covid" & Indicator == "no_tourist_foreign"], na.rm = TRUE)/22,
    PostCovid_tourists_foreign = sum(Value[Period == "Post-Covid" & Indicator == "no_tourist_foreign"], na.rm = TRUE)/16
  ) %>%
  mutate(PreCovidSpend_total = PreCovid_Revenue_total / PreCovid_tourists_total) %>%
  mutate(CovidSpend_total = Covid_Revenue_total / Covid_tourists_total) %>%
  mutate(PostCovidSpend_total = PostCovid_Revenue_total / PostCovid_tourists_total) %>%
  mutate(PreCovidSpend_foreign = PreCovid_Revenue_foreign / PreCovid_tourists_foreign) %>%
  mutate(CovidSpend_foreign = Covid_Revenue_foreign / Covid_tourists_foreign) %>%
  mutate(PostCovidSpend_foreign = PostCovid_Revenue_foreign / PostCovid_tourists_foreign)
  
```

With the summarized dataframe prepared, we can now prepare a few visualizations to look at the provinces with regards to the average monthly tourism revenue.

First, let us try using a scatterplot to see both the average revenue pre-Covid (x-axis) and post-Covid. (y-axis) Provinces with the highest pre-Covid revenue will appear the rightmost, while those that have the highest post-Covid revenue will appear the rightmost.

The code below uses the **plotly** package to produce an interactive scatterplot of the pre- and post-covid average monthly revenue for all tourists. With the interactive chart, the province names will be visible by hovering over and the user can zoom in by creating a selection in the chart.

```{r}
plot <- plot_ly(
  data = tourism_period,
  x = ~PreCovid_Revenue_total,
  y = ~PostCovid_Revenue_total,
  type = 'scatter',
  mode = 'markers',
  text = ~Province,
  hoverinfo = 'text'
) %>%
  layout(
    title = 'Monthly Pre- and Post-Covid Revenue - M-USD',
    xaxis = list(title = 'Average PreCovid Revenue'),
    yaxis = list(title = 'Average PostCovid Revenue')
  )

# Display the plot
plot
```

Baed on the plot, we see that Bangkok, Phuket and Chonburi have consistently been the top 3 highest revenue generating before and after the pandemic. When we look further down the list, we see some shifts for some of the provinces.

To aid the reader, we recreate the chart with those top 3 provinces excluded using the code chunk below.

```{r}
plot <- plot_ly(
  data = filter(tourism_period, !(Province %in% c("Bangkok", "Phuket", "Chonburi"))),
  x = ~PreCovid_Revenue_total,
  y = ~PostCovid_Revenue_total,
  type = 'scatter',
  mode = 'markers',
  text = ~Province,
  hoverinfo = 'text'
) %>%
  layout(
    title = 'Monthly Pre- and Post-Covid Revenue - M-USD, exc Top 3 Provinces',
    xaxis = list(title = 'Average PreCovid Revenue'),
    yaxis = list(title = 'Average PostCovid Revenue')
  )

# Display the plot
plot
```

Some key observations from the above charts are:

1.  Chiang Mai has moved from top 5 to top 4. A large reason for this is a drop from Krabi. Pre-covid, Krabi was top 4, but has dropped to at least top 10.

2.  Chiang Rai and Prachuap Khiri Khan have risen to top 5 and 6. These provinces were top 9 or lower before.

3.  Songkhla and Phang Nga were in the top 10 pre-Covid but are also showing a drop in ranking post-Covid

We can do the same chart for just the revenue from foreign tourists using the code chunk below.

```{r}
plot <- plot_ly(
  data = tourism_period,
  x = ~PreCovid_Revenue_foreign,
  y = ~PostCovid_Revenue_foreign,
  type = 'scatter',
  mode = 'markers',
  text = ~Province,
  hoverinfo = 'text'
) %>%
  layout(
    title = 'Monthly Pre- and Post-Covid Revenue from Foreign Tourists - M-USD',
    xaxis = list(title = 'Average PreCovid Revenue'),
    yaxis = list(title = 'Average PostCovid Revenue')
  )

# Display the plot
plot
```

The top 3 provinces are the same for both, but there are differences further down the list.

## C.2 Number of Tourists

The next measure we can look at is the number of tourists. We produce a similar line chart as we did for tourism revenue with the code chunk below. We display the number of tourists in thousands.

```{r}
# Subset the data to just the required indicators
aggregated_data <- tourism %>%
  filter(Indicator %in% c("no_tourist_all", "no_tourist_thai", "no_tourist_foreign")) %>%
  group_by(MonthYear, Indicator) %>%
  summarise(TotalValue = sum(Value, na.rm = TRUE) / 1000) %>%
  ungroup()

# Create the line chart
p <- ggplot(aggregated_data, aes(x = MonthYear, y = TotalValue, color = Indicator, group = Indicator)) +
  geom_line(size = 1) +
  labs(title = "Thailand Number of Tourists by Month",
       y = "Tourists, Thousands",
       x = "Month-Year") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        legend.position = "bottom") +
  scale_color_manual(values = c("no_tourist_all" = "blue", "no_tourist_thai" = "green", "no_tourist_foreign" = "red"))

# Convert the ggplot chart to an interactive plotly chart
interactive_plot <- ggplotly(p)

# Display the interactive plot
interactive_plot
```

The trend for the total follows the same general movement as the chart for revenue, however, it looks like tourist numbers are primarily driven by locals than foreigners.
