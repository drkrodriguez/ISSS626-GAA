---
title: "Network Constrained Spatial Point Patterns Analysis"
author: "Federico Jose Rodriguez"
date: "Sep 5 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

In this hands-on exercise, we learn some more SPPA with **Network Constrained Spatial Point Patterns Analysis** or **NetSPPA**. This is a collection of SPPA methods that is used to analyse spatial point events occuring on or alongside a network– which can be a road network, river network, etc.

We will be using the spNetwork package to derive the network kernel density estimation (NKDE) and then we perform analysis on the G-function and K-Function.

This exercise is based on Chapter 7 of Dr Kam's online book which can be accessed [here](https://r4gdsa.netlify.app/ "R for Geospatial Data Science and Analytics by Dr Kam").

# Getting Started

## Data Sources

Data for this exercise are from public sources and will be used to analyse the distribution of childcare centers in the Punggol planning area. Two datasets in ESRI shapefile format will be used:

-   A line feature geospatial dataset which includes the road network of Punggol planning area

-   A point feature geospatial dataset which includes the location of childcare centers in the Punggol planning area

## Installing and launching R packages

This exercise will make use of five R packages: **sf**, **spNetwork**, **tidyverse,** and **tmap**.

-   **sf -** for importing, managing and processing vector-based geospatial data

-   **tidyverse -** collection of packages for performing data importation, wrangling and visualization

-   **tmap -** for plotting cartographic quality maps

-   **sPNetwork** - provides functions for performing SPPA methods like KDE and K-function on a network. The package can also be used to build spatial matrices to conduct traditional spatial analyses with spatial weights based on reticular distances

The code chunk below uses `p_load()` of **pacman** package to check if the packages are installed in the computer. It installs them first if they are not. It then loads them into R.

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse)
```

# Data Import and Preparation

The code chunks below uses `st_read()` of the **sf** package to load the street and childcare data into their respective dataframes.

```{r}
network <- st_read(dsn="data/geospatial", 
                   layer="Punggol_St")
```

```{r}
childcare <- st_read(dsn="data/geospatial",
                     layer="Punggol_CC")
```

We can examine the structure of the two sf tables by calling them as in the display below

::: panel-tabset
###### Childcare Centres

```{r}
childcare
```

###### Network

```{r}
network
```
:::

Note that spNetwork needs the data to have complete CRS information to function.

# Visualizing the Geospatial Data

Before performing the actual analysis, it is always best to perform some EDA, including the visualization of the data. There are two ways to visualize geospatial data. The first is using `plot()` from **Base R** as shown in the code chunk below.

```{r}
plot(st_geometry(network))
plot(childcare, add = T, col = 'red', pch = 19)
```

The second option is using the functions of **tmap** to create cartographic quality maps as seen in the code below

```{r}
tmap_mode('view')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
```

After creating an interactive map, (mode = view) we should always go back to static mode so we save on resources.

```{r}
tmap_mode('plot')
```

# Network KDE (NKDE) Analysis

We then perform **NKDE** using the functions in the **spNetwork** package.

## Preparing the lixels objects

Before computing the NKDE, SpatialLines objects need to be cut into lixels with a specified minimal distance. We do this using `lixelize_lines()` of **spNetwork** as shown in the code chunk below.

```{r}
lixels <- lixelize_lines(network, 
                         700, 
                         mindist = 375)
```

The second argument of the function is `lx_length` which stands for the lixel length and was set to 700. The minimum lixel lngth is set to 375 by the `mindist` argument. If the length of the final lixel is shorter than `mindist` then it is added to the previous lixel. If `mindist` is NULL, then it is set to maxdist / 10.

## Generating line centre points

Next, we use `line_center()` of **spNetwork** to generate a SpatialPointsDataFrame with line centre points as in the code chunk below. The centres will be located in the middle of the line based on the length.

```{r}
samples <- lines_center(lixels) 
```

## Performing NKDE

The code chunk below computes the NKDE

```{r}
densities <- nkde(network, 
                  events = st_zm(childcare),
                  w = rep(1, nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
```

A few points on the arguments in the code chunk above:

-   The `st_zm()` function drops the z coordinate of `childcare` since the function requires two-dimensional inputs, while `childcare` has 3

-   `kernel_name` is set to *quartic* but can be also set to other kernel methods like: *triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov* or *uniform*

-   `method` is currently set to use *simple* method to be used to calculate the NKDE. There are three popular methods that are used

    -   *simple* - distances between events and sampling points are replaced by network distances. The formula of the kernel is adapted to calculate the density over a linear instead of an areal unit

    -   *discontinuous* - equally divides the mass density of an event at the intersection of the lixels.

    -   *continuous* - divides the mass of the density at the intersection but adjusts the density before the intersection to make the function continuous

## Visualizing NKDE

We first insert the computed density values into the `samples` and `lixels` objects as a field density

```{r}
samples$density <- densities
lixels$density <- densities
```

Before plotting, we rescale the distances of the objects from the current SVY21 default of meter to kilometer, by using a multiple of 1000

```{r}
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

The code chunk below produces an interactive map using tmap. The resulting map reveals road segments with high density of childcare centres based on the intensity of the color (i.e., darker shading is more dense)

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
tmap_mode('plot')
```

# Network Constrained G- and K-Function Analyses

In this section, we test for CSR (Complete Spatial Randomness) by using functions of the **spNetwork** package. The test hypotheses for our problems are:

-   $H_0$ - The observed spatial points, or the locations of childcare service centres, are randomly distributed over the street network in the Punggol Planning Area

-   $H_1$ - The observed spatial points, or the locations of childcare service centres, are **not** randomly distributed over the street network in the Punggol Planning Area

For our testing, we will use a p-value smaller than α = 0.05 to reject the null hypothesis, or a 95% confidence interval.

The code chunk below runs the test.

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

the `kfunctions()` accepts multiple arguments, ten of which are used in our code. We give a few points on the arguments below:

1.  `lines` - the first argument is a SpatialLinesDataFrame (currently set to `network` or the Punggol Planning area road network)

2.  *points* - the second argument is a SpatialPointsDataFrame (currently set to `childcare` or the location of childcare service centres)

3.  *start* - the start value/distance for evaluating the K and G functions

4.  *end* - the last value/distance for evaluating the K and G functions

5.  *step* - the jump or spacing between two evaluations of the K and G functions

6.  *width* - the width of each donut for the G-function

7.  *nsim* - the number of Monte Carlo simulations to perform. (currently set to 50) A high number of simulations are required to build a proper inference

8.  *resolution* - can reduce calculation time in simulating by splitting the edges (based on this value) and the random points are selected vertices in the new network. If this is not set, then random points can occur anywhere on the graph

9.  *conf_int* - indicates the width of the confidence interval (currently set to 0.05 or 5%)

10. *verbose* - indicates whether progress messages should be displayed (currently set to FALSE)

The function outputs a list with the following values:

-   `plotk` - a ggplot2 object representing the value of the K-function

-   `plotg` - a ggplot2 object representing the value of the G-function

-   `values` - a dataframe with the values used to build the plots

We can display the K-function output using the code below.

```{r}
kfun_childcare$plotk
```

The plot shows the empirical or observed K-function as a blue line while the gray area is an envelop representing the 95% confidence interval from the simulations. The graph shows that below \~450m the distribution resembles a regular pattern (below envelop resembles regular, above resembles/indicates clustering)

Similarly, we can visualize the G-function using the code chunk below.

```{r}
kfun_childcare$plotg
```
