---
title: "Advanced SPPA Methods - NCKDE"
author: "Federico Jose Rodriguez"
date: "Sep 9 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Getting Started

## Data Sources

Data for this exercise are from public sources and will be used to analyse the distribution of childcare centers in the Punggol planning area. Two datasets in ESRI shapefile format will be used:

-   A line feature geospatial dataset which includes the road network of Punggol planning area

-   A point feature geospatial dataset which includes the location of childcare centers in the Punggol planning area

## Installing and launching R packages

This exercise will make use of five R packages: **sf**, **spNetwork**, **tidyverse,** and **tmap**.

-   **sf -** for importing, managing and processing vector-based geospatial data

-   **tidyverse -** collection of packages for performing data importation, wrangling and visualization

-   **tmap -** for plotting cartographic quality maps

-   **sPNetwork** - provides functions for performing SPPA methods like KDE and K-function on a network. The package can also be used to build spatial matrices to conduct traditional spatial analyses with spatial weights based on reticular distances

The code chunk below uses `p_load()` of **pacman** package to check if the packages are installed in the computer. It installs them first if they are not. It then loads them into R.

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse)
```

We use the random seed 1234 to ensure reproducibility of results

```{r}
set.seed(1234)
```

# Data Import and Preparation

The code chunks below uses `st_read()` of the **sf** package to load the street and childcare data into their respective dataframes.

```{r}
network <- st_read(dsn="data/geospatial", 
                   layer="Punggol_St")
```

```{r}
childcare <- st_read(dsn="data/geospatial",
                     layer="Punggol_CC")
```

We examine the contents of these objects by running the code chunks below

```{r}
network
```

```{r}
childcare
```

We see from the output of calling `childcare` that the dataset includes a third dimensionâ€“ a z-coordinate. The spNetwork package can only accept objects in (x,y) and not in (x,y,z)

To go around this, we re-import the data with `st_zm()` (using default arguments: *drop = TRUE, what = "ZM"*) to remove the z-coordinate

```{r}
childcare <- st_read(dsn="data/geospatial",
                     layer="Punggol_CC") %>%
  st_zm()
```

Checking the content of the object shows that the third dimension is now dropped

```{r}
childcare
```

## Visualization of the sf objects

The code below uses `plot()` in one map. The `add=T` argument in the second line allows the two plots to be added one over the other.

```{r}
plot(st_geometry(network))
plot(childcare, add=T, col="red", pch=10)
```

The following code chunk produces a similar map using **tmap** package.

```{r}
tmap_mode('view')
tm_shape(network) +
  tm_lines() +
  tm_shape(childcare) +
  tm_dots(col = "red")
tmap_mode('plot')
```

# Network Constrained Spatial Point Analysis

## Preparing the lixels objects

A requirement for NKDE is that the lines objects needs to be cut into lixels. The code below uses `lixelize_lines()` on `network`, using a length of 700 and a minimum distance (`mindist`) of 350.

```{r}
lixels <- lixelize_lines(network,
                         700,
                         mindist = 350)
```

## Generating the line center points

The code below generates the center points for the lixels

```{r}
samples <- lines_center(lixels)
```

xxx

```{r}
tmap_mode("view")

tm_shape(lixels) +
  tm_lines() +
  tm_shape(samples) +
  tm_dots(size = 0.01)

tmap_mode("plot")
```

## Computing NKDE

The code below computes for the NKDE of childcare centres around `network`

```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1, nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
```

The output of the code is a list of density or intensity values. We copy these values into the original lixel and lixel midpoint dataframes.

```{r}
samples$density <- densities
lixels$density <- densities
```

Note that the previous values are based on metres and resulted in very low density values. We can change the density values to event per square km by using the code below

```{r}
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

## Computing the K and G Functions

The code block below computes for the K- and G-functions based on the data using `kfunctions()`

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 49, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

The output can be visualized by calling `plotk` for the K-function and `plotg` for the G-function

```{r}
kfun_childcare$plotk
```
