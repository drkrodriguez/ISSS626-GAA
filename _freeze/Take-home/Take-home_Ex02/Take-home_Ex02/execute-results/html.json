{
  "hash": "ef52cacf1c6abf693225928b64229538",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Discovering Impact of COVID-19 on Thai Tourism Economy\"\nauthor: \"Federico Jose Rodriguez\"\ndate: \"Sep 23 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n\n(Exercise Summary)\n\n# A. Getting Started\n\n## A.1 Background\n\nTourism is a major industry in Thailand as it made up to 20% of their gross domestic product pre-pandemic. However, like the rest of the world, the industry has taken a hit with COVID-19 in 2020, and has slowly been recovering since 2021. Recent reports are stating that Thailand is already, but still, at 80% of its peak level in 2019.\n\nWhile we speak about the industry in general, the state of tourism within Thailand, and their recovery status are not the same. For example, tourism revenues have been focused on Bangkok, Phuket and Chonburi pre-pandemic.\n\nWe are interested in understanding the state of tourism across Thailand with regards to its spatial distribution and time and space distribution– both in absolutes and in terms of the trend with respect to the pandemic.\n\n## A.2 Objectives\n\nFor this study, we want to understand the state of tourism in Thailand at a provincial level, and answer the following questions:\n\n1.  Are the key tourism indicators in Thailand (at a province level) independent from space and from space and time?\n\n2.  If tourism or any tourism indicators are not independent, what are the clusters, outliers and emerging hotspots and coldspots?\n\nWe will use the appropriate packages in R in order to perform the different analysis (spatial and otherwise) to support our answers to the above questions.\n\n## A.3 Data Sources\n\nThe following data sources are used for this analysis:\n\n-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) from Kaggle covering the years 2019-2023 and are at province and month level across 8 indicators:\n\n    1.  `no_tourist_all` - total number of domestic tourists\n\n    2.  `no_tourist_foreign` - number of foreign tourists\n\n    3.  `no_tourist_occupied` - number of hotel rooms occupied\n\n    4.  `no_tourist_thai` - number of Thai tourists\n\n    5.  `occupancy_rate` - the percentage of occupied travel accommodations\n\n    6.  `revenue_all` - total tourism revenue, in THB\n\n    7.  `revenue_foreign` - revenue generated by foreign tourists, in THB\n\n    8.  `revenue_thai` - revenue generated by Thai tourists, in THB\n\n-   [Thailand-Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) from Human Data Exchange in shapefile format\n\n## A.4 Importing and Launching R Packages\n\nFor this study, the following R packages will be used. A description of the packages and the code, using `p_load()` of the **pacman** package, to import them is given below.\n\n::: panel-tabset\n#### Package Description\n\nThe loaded packages include:\n\n-   **sf -** package for importing, managing and processing vector-based geospatial data\n\n-   **tidyverse -** collection of packages for performing data importation, wrangling and visualization\n\n-   **tmap -** package with functions for plotting cartographic quality maps\n\n-   **sfdep** - for handling spatial data\n\n-   **coorplot, ggpubr, heatmaply, factoextra** - packages for multivariate data visualization and analysis\n\n-   **cluster, ClustGeo, NbClust** - packages for performing cluster analysis\n\n#### Import Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, sfdep, tidyverse,\n               ggpubr, heatmaply, factoextra,\n               NbClust, cluster, ClustGeo)\n```\n:::\n\n\n:::\n\nAs we will be performing simulations in the analysis later, it is good practice to define a random seed to be used so that results are consistent for viewers of this report, and the results can be reproduced.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n# B. Data Loading and Preparation\n\n## B.1. Thailand Subnational Boundary, Provincial Level\n\nWe load the Thailand subnational administrative boundary shapefile into an R dataframe using `st_read()` from the sf package. We need to analyze at the provincial level so we will be using the files suffixed by \"1\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_sf <- st_read(dsn=\"data/geospatial\", \n                   layer=\"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\Take-home\\Take-home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe output states that the object is of multipolygon geometry type containing 77 features (records) across 16 fields. (columns) We can check the contents of the object using a number of methods. For the code chunk below, we use `glimpse()` which lists the columns, gives the data type and the first elements.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thai_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n\nFor clarity, we can clean up this dataframe by:\n\n1.  Keeping only relevant columns: The province name and code, geometry\n2.  Renaming the columns: change ADM1 to Province\n\nThe following code chunk executes these steps by using `select()` for the first step and `rename()` for the second step. We again use `glimpse()` to give a preview of the dataset's columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_sf <- thai_sf %>%\n  select(ADM1_EN, ADM1_PCODE, geometry) %>%\n  rename(Province = ADM1_EN, ProvCode = ADM1_PCODE)\n\nglimpse(thai_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 3\n$ Province <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"Phr…\n$ ProvCode <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH17…\n$ geometry <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIPOLYGON (((…\n```\n\n\n:::\n:::\n\n\n\nWe can check if there are any missing values by using `is.na()` and then check across each column using `colSums()` from **Base R**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(thai_sf))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProvince ProvCode geometry \n       0        0        0 \n```\n\n\n:::\n:::\n\n\n\nThe output shows that there are no missing values for any of the retained columns.\n\nFinally, we can quickly check if the object depicts Thailand properly by producing a quick map using `qtm()` from **tmap** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(thai_sf)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## B.2. Thailand Tourism Data by Province, Jan 2019 - Feb 2023\n\nThe code chunk below loads the tourism statistics data into a dataframe `tourism`. We use read_csv() to import the data from the file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- read_csv(\"data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nWe can check the contents by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30,800 × 7\n   date       province_thai province_eng   region_thai region_eng variable value\n   <date>     <chr>         <chr>          <chr>       <chr>      <chr>    <dbl>\n 1 2019-01-01 กรุงเทพมหานคร  Bangkok        ภาคกลาง     central    ratio_t…  93.4\n 2 2019-01-01 ลพบุรี          Lopburi        ภาคกลาง     central    ratio_t…  61.3\n 3 2019-01-01 พระนครศรีอยุธยา Phra Nakhon S… ภาคกลาง     central    ratio_t…  73.4\n 4 2019-01-01 สระบุรี         Saraburi       ภาคกลาง     central    ratio_t…  67.3\n 5 2019-01-01 ชัยนาท         Chainat        ภาคกลาง     central    ratio_t…  79.3\n 6 2019-01-01 นครปฐม        Nakhon Pathom  ภาคกลาง     central    ratio_t…  71.7\n 7 2019-01-01 สิงห์บุรี         Sing Buri      ภาคกลาง     central    ratio_t…  64.6\n 8 2019-01-01 อ่างทอง        Ang Thong      ภาคกลาง     central    ratio_t…  71.2\n 9 2019-01-01 นนทบุรี         Nonthaburi     ภาคกลาง     central    ratio_t…  75.1\n10 2019-01-01 ปทุมธานี        Pathum Thani   ภาคกลาง     central    ratio_t…  60.8\n# ℹ 30,790 more rows\n```\n\n\n:::\n:::\n\n\n\nThe imported data contains 7 fields and 30,800 records at a province and month level.\n\nBefore we analyze the dataset, let use remove unnecessary columns and rename the column names, similar to the previous dataset, using the code chunk below. (by using `select()` and `rename()`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism %>%\n  select(date, province_eng, region_eng, variable, value) %>%\n  rename(Date = date, Province = province_eng, Region = region_eng, Indicator = variable, Value = value)\n\nhead(tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  Date       Province                 Region  Indicator          Value\n  <date>     <chr>                    <chr>   <chr>              <dbl>\n1 2019-01-01 Bangkok                  central ratio_tourist_stay  93.4\n2 2019-01-01 Lopburi                  central ratio_tourist_stay  61.3\n3 2019-01-01 Phra Nakhon Si Ayutthaya central ratio_tourist_stay  73.4\n4 2019-01-01 Saraburi                 central ratio_tourist_stay  67.3\n5 2019-01-01 Chainat                  central ratio_tourist_stay  79.3\n6 2019-01-01 Nakhon Pathom            central ratio_tourist_stay  71.7\n```\n\n\n:::\n:::\n\n\n\nWe have kept only five of the columns which provides the date, the English descriptions for the location (province and region) as well as the (potential) tourism indicator and its value.\n\nWe can also check for any missing values across these five columns using the code below. (using `is.na()` and `colSums()`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(tourism))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Date  Province    Region Indicator     Value \n        0         0         0         0         0 \n```\n\n\n:::\n:::\n\n\n\nWe check the (WIP)\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}