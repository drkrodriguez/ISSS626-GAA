{
  "hash": "666406afffa65727339375748dd5a7f0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 1: Introduction to Geospatial Analytics\"\nauthor: \"Federico Jose Rodriguez\"\ndate: \"Aug 26 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n\n# Getting Started\n\n## Data Sources\n\nThe exercise uses the following data sources:\n\n-   Master Plan 2014 Subzone Boundary from data.gov.sg in [SHP](https://beta.data.gov.sg/datasets/d_d14da225fccf921049ab64238ff473d9/view) and [KML](https://beta.data.gov.sg/datasets/d_5cb80a95445f236737f6bc2bfe5f159d/view) formats\n\n-   Master Plan 2019 Subzone Boundary from [data.gov.sg](https://beta.data.gov.sg/datasets/d_0900fdcfdb4666fe2a630f37a532fc06/view)\n\n-   Pre-school locations from [data.gov.sg](https://beta.data.gov.sg/datasets/d_a72bcd23e208d995f3bd4eececeaca43/view)\n\n-   Singapore 2023 population from [singstat.gov.sg](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesextod2023.ashx)\n\n## Installing and launching R packages\n\nThis exercise will make use of four R packages: **sf**, **tidyverse, ggstatsplot** and **tmap**.\n\nThe code chunk below uses `p_load()` of **pacman** package to check if the packages are installed in the computer. It installs them first if they are not. It then loads them into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, tmap, ggstatsplot)\n```\n:::\n\n\n\n# Data Preparation\n\n## Importing the Geospatial Data\n\nThe code chunk below loads the Masterplan subzone boundary shape file as a dataframe `mpsz14_shp`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below loads the Masterplan subzone boundary KML file as a dataframe `mpsz14_kml`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_kml = st_read(\"data/geospatial/MasterPlan2014SubzoneBoundary.kml\")\n```\n:::\n\n\n\nRunning the code shows that the data is likely corrupted as it is not being properly loaded into R. To illustrate loading the same data in KML format, we can create a clean KML file using `st_write()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(mpsz14_shp,\n         \"data/geospatial/MP14SubzoneBoundary.kml\",\n         delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/geospatial/MP14SubzoneBoundary.kml' using driver `KML'\nWriting layer `MP14SubzoneBoundary' to data source \n  `data/geospatial/MP14SubzoneBoundary.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz14_kml = st_read(\"data/geospatial/MP14SubzoneBoundary.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14SubzoneBoundary' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial\\MP14SubzoneBoundary.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below loads the 2019 Masterplan subzone boundary SHP file as a dataframe `mpsz19_shp`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp = st_read(dsn = \"data/geospatial\", \n                  layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe output shows that the data uses a geographic coordinate system instead of a projected coordinate system that we need for analysis. This needs to be translated before we can analyze this data with our other datasets. To do this, we can revise the code to:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp = st_read(dsn = \"data/geospatial\", \n                  layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below loads the KML file and also shows we have it in geographic coordinate system.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml = st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below loads the preschool location in KML format into a dataframe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_kml = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below loads the preschool location in GeoJSON format into a dataframe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_geojson = st_read(\"data/geospatial/PreSchoolsLocation.geojson\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PreSchoolsLocation' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial\\PreSchoolsLocation.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe last two files are again in GCS (WGS84) rather than projected coordinate system (SVY21) We can reconfirm this with the next code chunk\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(preschool_kml)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\nWe can use the following code to import the preschool location and project it into SVY21\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_read(\"data/geospatial/PreSchoolsLocation.kml\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n\nThe code chunks below load the Master Plan 2019 Subzone Boundary Data into R dataframes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/geospatial\",\n                layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml <- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below checks the CRS information of `mpsz19_shp`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz19_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\nIt appears `mpsz19_shp` does not have the correct EPSG code of 3414. The same is true for preschool. The code chunk below reloads the information and already applies the correct EPSG code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/geospatial\",\n                layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\npreschool <- st_read(\"data/geospatial/PreSchoolsLocation.kml\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\In-class\\In-class_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n## Geospatial Data Wrangling\n\nThe code chunk below counts the number of preschools in each planning subzone\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- mpsz19_shp %>%\n  mutate(`PreSch Count` = lengths(\n    st_intersects(mpsz19_shp, preschool)))\n```\n:::\n\n\n\nThe code below then does the following in one line of code:\n\n1.  Derives the area of each planning zone\n2.  Drops the unit of measurement of the area\n3.  Calculates the density of pre-schools at each planning zone\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- mpsz19_shp %>%\n  mutate(Area = units::drop_units(\n    st_area(.)),\n    `PreSch Density` = `PreSch Count` / Area * 1000000\n  )\n```\n:::\n\n\n\n## Statistical Analysis\n\nOnce we have computed the area, we can perform the appropriate analysis to see if there are any relationships.\n\nThe code below creates a plot of the preschool density and the preschool count using `ggscatterstats()` of **ggstatsplot** package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))\nmpsz19_shp$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) \nmpsz19_shp <- as.data.frame(mpsz19_shp)\n\nggscatterstats(data = mpsz19_shp,\n               x = `PreSch Density`,\n               y = `PreSch Count`,\n               type = \"parametric\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_xsidebin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_ysidebin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## Importing and Wrangling Aspatial Data\n\nWe load the 2023 population data into a dataframe called `popdata` and see that there are 101K rows and 7 columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata = read_csv(\"data/aspatial/respopagesextod2023.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below prepares a dataframe showing the population by planning area and planning subzone\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata %>% \n  group_by(PA, SZ, AG) %>% \n  summarise(`POP`=sum(`Pop`)) %>%  \n  ungroup() %>% \n  pivot_wider(names_from=AG,\n              values_from = POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n\n\nWe then convert the dataframe where the age ranges are grouped into three groups (ECONOMY ACTIVE, AGED, YOUNG) and also introduce the DEPENDENCY column which is the ratio of YOUNG and AGED compared to ECONOMY ACTIVE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24\n         +rowSums(.[14])) %>% # Aged 5 - 9\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59\n  rowSums(.[15])) %>%  # Aged 60 -64\n  mutate(`AGED`=rowSums(.[16:21])) %>%\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%\n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n  / `ECONOMY ACTIVE`) %>% \n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`,\n         `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n\n## Joining Aspatial Data with Geospatial Data\n\nthe code chunk below combines the population information with the geospatial data for the planning zone boundaries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) \n\nmpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\npop2023_mpsz <- left_join(popdata2023, mpsz19_shp, \n                          by = c(\"SZ\" = \"SUBZONE_N\"))\n```\n:::\n",
    "supporting": [
      "In-class_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}