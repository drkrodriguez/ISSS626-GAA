{
  "hash": "9ce133f3d89cc176ddc0c834f1b13770",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spatial Weights and Applications\"\nauthor: \"Federico Jose Rodriguez\"\ndate: \"Sep 15 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n\nIn this hands-on exercise, we learn how to compute spatial weights and spatially lagged in R using the **spdep** package.\n\nThis exercise is based on Chapter 8 of Dr Kam's online book which can be accessed [here](https://r4gdsa.netlify.app/ \"R for Geospatial Data Science and Analytics by Dr Kam\").\n\n# Getting Started\n\n## Data Sources\n\nData for this exercise are based on the Hunan county coming from two files:\n\n-   Hunan county boundary layer in ESRI shapefile format\n\n-   Hunan local development indicators for 2012 stored in a csv file\n\n## Installing and launching R packages\n\nThis exercise will make use of five R packages: **sf**, **tidyverse,** **tmap, and spdep**.\n\n-   **sf -** for importing, managing and processing vector-based geospatial data\n\n-   **tidyverse -** collection of packages for performing data importation, wrangling and visualization\n\n-   **tmap -** for plotting cartographic quality maps\n\n-   **spdep** - functions to create spatial weights\n\nThe code chunk below uses `p_load()` of **pacman** package to check if the packages are installed in the computer. It installs them first if they are not. It then loads them into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse)\n```\n:::\n\n\n\n# Data Import and Preparation\n\n## Data Loading\n\nThe code chunk below uses `st_read()` of the **sf** package to load the Hunan shapefile into an R object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\drkrodriguez\\ISSS626-GAA\\Hands-on\\Hands-On_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe following code chunk imports the second data source, a csv file, into an R object using `read_csv()` of the **readr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nWe can examine the contents of the two objects by calling them.\n\n::: panel-tabset\n#### hunan sf dataframe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n```\n\n\n:::\n:::\n\n\n\n#### hunan2012 dataframe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 88 × 29\n   County    City   avg_wage deposite    FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO\n   <chr>     <chr>     <dbl>    <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl>\n 1 Anhua     Yiyang    30544   10967   6832.    457.   2703  13225  14567  9277.\n 2 Anren     Chenz…    28058    4599.  6386.    221.   1455.  4941. 12761  4189.\n 3 Anxiang   Chang…    31935    5517.  3541     244.   1780. 12482  23667  5109.\n 4 Baojing   Hunan…    30843    2250   1005.    193.   1379.  4088. 14563  3624.\n 5 Chaling   Zhuzh…    31251    8241.  6508.    620.   1947  11585  20078  9158.\n 6 Changning Hengy…    28518   10860   7920     770.   2632. 19886  24418 37392 \n 7 Changsha  Chang…    54540   24332  33624    5350    7886. 88009  88656 51361 \n 8 Chengbu   Shaoy…    28597    2581.  1922.    161.   1192.  2570. 10132  1681.\n 9 Chenxi    Huaih…    33580    4990   5818.    460.   1724.  7755. 17026  6644.\n10 Cili      Zhang…    33099    8117.  4498.    500.   2306. 11378  18714  5843.\n# ℹ 78 more rows\n# ℹ 19 more variables: Loan <dbl>, NIPCR <dbl>, Bed <dbl>, Emp <dbl>,\n#   EmpR <dbl>, EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>\n```\n\n\n:::\n:::\n\n\n:::\n\n## Performing relational join\n\nThe code chunk below will be used to import columns from `hunan2012` into `hunan` using `left_join()` of the **dplyr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n:::\n\n\n\n# Visualising Regional Development Indicator\n\nThe code chunk below uses **tmap** package to create two side by side maps of the basemap and a choropleth map based on the `GDPPC` attribute.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Computing Contiguity Spatial Weights\n\nThe `poly2nb()` of the **spdep** package computes contiguity weight matrices for a study area. This builds a neighbour list based on regions with contiguous boundaries. The function includes a `queen` argument which defaults to TRUE. This argument dictates whether the Queen criteria will be used in building a list of first order neighbours.\n\n## Computing (QUEEN) contiguity based neighbours\n\nThe code chunk below computes for a Queen contiguity weight matrix and displays a summary.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n\n\n:::\n:::\n\n\n\nThe output shows that:\n\n-   There are 88 units in the dataset.\n\n-   The most connected unit has 11 neighbours (and only one unit has 11 neighbours)\n\n-   There are two units with only one neighbour.\n\nThe resulting polygon object wm_q lists all neighboring polygons for each polygon. For example, the following code will show the neighbors of the first polygon:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  4 57 85\n```\n\n\n:::\n:::\n\n\n\nThis shows that there are 5 neighbors for the first polygon. The numbers denote the id of those neighbors as they are stored in `hunan`.\n\nWe can retrieve the names of those polygons or units using the code chunk below. The columns `County` and `NAME_3` contain the same value so either may be used to return the names\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan$County[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Anxiang\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhunan$NAME_3[c(2,3,4,57,85)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n```\n\n\n:::\n:::\n\n\n\nWe can retrieve the GDPPC of these countries using the code below (for polygon 1 and then for its five neighbours)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan$GDPPC[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23667\n```\n\n\n:::\n\n```{.r .cell-code}\nhunan$GDPPC[wm_q[[1]]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20981 34592 24473 21311 22879\n```\n\n\n:::\n:::\n\n\n\nThe complete weight matrix can be displayed by using `str()`, i.e., `str(wm_q)`\n\n## Computing (ROOK) contiguity based neighbours\n\nThe code chunk below computes the Rook contiguity weight matrix by setting the `queen` argument to FALSE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n```\n\n\n:::\n:::\n\n\n\nThe report shows a few differences compared to the earlier QUEEN contiguity matrix. The most connected area has 10 instead of 11 neighbors, and there are differences in the details from the number of nonzero links to the average number of links.\n\n## Visualizing contiguity weights\n\nIn this section, we introduce connectivity graphs which displays lines between neighboring points. As we are working with a polygon object at the moment, we would need to convert or define points to represent them first before attempting to build a connectivity graph. The most common method to do this is by choosing the centroid as the point for the polygon\n\n### Getting longitude and latitude of polygon centroids\n\nThe process is slightly complicated as we cannot immediately simply run `st_centroid()` on the object.\n\nFirst, we need to get the coordinates of the polygons in separate dataframe by using a mapping function. The code chunk below create a dataframe for the centroids along the longitude by using `st_centroid()` on the geometry longitude using double bracket notation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\n\nFor the latitudes, we use a similar code with the only difference being the index referenced by the double bracket notation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n\nWe can then use `cbind()` to combine the two objects into a single object for the centroid locations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- cbind(longitude, latitude)\n```\n:::\n\n\n\nWe can confirm that the points are formatted correctly by checking the first few records with `head()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n```\n\n\n:::\n:::\n\n\n\n### Plotting Queen contiguity based neighbours map\n\nThe code below creates the connectivity graph based on the matrix in `wm_q`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### Plotting Rook contiguity based neighbours map\n\nThe code below creates the connectivity graph based on the matrix in `wm_r`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### Plotting Queen and Rook contiguity based neighbours map\n\nThe code below creates the connectivity graph for both queen and rook based contiguity and show theem side by side\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n# Computing distance-based neighbours\n\nIn this section, we will use `dnearneigh()` of the **spdep** package to derive the distance-based weight matrices. This function identifies neighbours by Euclidean distance based on a lower (`d1`) and upper (`d2`) bound based on the `bounds` argument.\n\n## Determining the cut-off distance\n\nThe first step is to determine the upper limit for the distance bands by using the following steps:\n\n1.  Using `knearneigh()` of **spdep** package to produce a matrix of the (indices) of the k-nearest neighbors (knn) of each unit\n\n2.  Using `knn2nb()` to convert the resulting knn object into a neighbors list of class nb with a list of integer vectors containing the neighbor region number ids\n\n3.  Using `nbdists()` to return the length of neighbor relationship edges. Note that this function returns in the same units if the source is projected. Otherwise, it uses km\n\n4.  Using `unlist()` to remove the list structure of the returned object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n```\n\n\n:::\n:::\n\n\n\nThe summary shows that the largest first nearest neighbor distance is 61.79km, so this is a good upper threshold that ensures that all units will have at least one neighbor\n\n## Computing fixed distance weight matrix\n\nWe use `dnearneigh()` in the code chunk below to compute the distance weight matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n```\n\n\n:::\n:::\n\n\n\nWe can use str() to display the contents of the `wm_d62` weight matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(wm_d62)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n\nAlternatively, we can also display the matrix in another form using `table()` and `card()` of **spdep**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(hunan$County, card(wm_d62))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(n_comp$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1 \n88 \n```\n\n\n:::\n:::\n\n\n\n### Plotting the fixed distance weight matrix\n\nThe code chunk below plots the distance weight matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\nThe red lines show the links for first nearest neighbors while black ones show neighbors based on a cut-off distance of 62km. We can use the code chunk below to show these two set of links separately.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n## Computing adaptive distance weight matrix\n\nA fixed distance weight matrix will produce more neighbours for areas that are more densely packed compared to areas that are less densely packed.\n\nk-nearest neighbors can be used to control the number of neighbors directly. This is done using `knn2nb()` in the code below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n\n\nThis code guarantees that each unit has exactly six neighbors.\n\n### Plotting distance based neighbors\n\nThe code chunk below plots the weight matrix based on knn,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n# Weights based on IDW\n\nIn this section we derive a spatial weight matrix based on Inversed Distance method.\n\nFirst, we compute the distances between units by using `nbdists()` of **spdep** in the code chunk below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n```\n\n\n:::\n:::\n\n\n\n# Row-standardised weights matrix\n\nNext, weights are assigned to each neighboring polygon. For our case, we will use an equal weight (using `style=\"W\"`) for each neighbor. This is done by using 1/n where n is the number of neighbors, then summing the weighted income values. This method has a downside that units along the edges will base their values on fewer polygons and the spatial correlation may be over- or under-estimated. Other more robust methods like `style=\"B\"` can be employed to minimize this impact\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n```\n\n\n:::\n:::\n\n\n\nThe argument `zero.policy=TRUE` allows for lists of non-neighbors. This should be used with caution as the user might not be aware of missing neighbors in the data.\n\nTo see the weight of the tenth polygon's eight neighbors, we use the code below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n```\n\n\n:::\n:::\n\n\n\nEach neighbor is assigned a weight of 0.125. This means that wehen R computes an average for the neighbor income values, each neighbor will be applied the same 0.125 weight.\n\nWe can also derive a row-standardised distance matrix using the code chunk below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n```\n\n\n:::\n:::\n\n\n\n# Application of Spatial Weight Matrix\n\nFor the remainder of this exercise, we create four different spatial-lagged variables:\n\n1.  spatial lag with row-standardized weights;\n\n2.  spatial lag as a sum of neighboring values;\n\n3.  spatial lag window average; and,\n\n4.  spatial window sum\n\n## Spatial lag with row-standardized weights\n\nWe compute the average neighbor GDPPC for each unit using the code below. These are referred to as spatially lagged values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n```\n\n\n:::\n:::\n\n\n\nIn one of the previous sections, we retrieved the GDPPC of the five neighboring counties of the first one using the code below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb1 <- wm_q[[1]]\nnb1 # neighbors of county 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  4 57 85\n```\n\n\n:::\n\n```{.r .cell-code}\nnb1 <- hunan$GDPPC[nb1]\nnb1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20981 34592 24473 21311 22879\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(nb1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24847.2\n```\n\n\n:::\n:::\n\n\n\nThe average of these corresponds to the first value in GDPPC.lag\n\nWe can append the GDPPC values into `hunan` using the code chunk below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below shows the average neighbor GDPPC for the first counties as the new added column (`lag GDPPC`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hunan)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n```\n\n\n:::\n:::\n\n\n\nNext, we can plot the individual and spatial lag GDPPC side by side to compare, using the code chunk below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n## Spatial lag as sum of neighboring values\n\nAnother approach is by assigning inary weights. This requires applying a function of assigning binary weights on the neighbor list using `glist=` in the `nb2listw()` function to assign weights\n\nWe start by assigning a value of 1 to each neighbor using `lapply()` which applies a function to each value in the object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n```\n\n\n:::\n:::\n\n\n\nWith weights assigned, we can then use `lag.listw()` to compute a lag variable from our weights and the GDDPPC\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n```\n:::\n\n\n\nWe can examine the results using the code below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag_sum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n```\n\n\n:::\n:::\n\n\n\nThe resulting variables are the sum of the neighboring counties' GDPPC. For example, the first value 124236 is the same as:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(nb1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 124236\n```\n\n\n:::\n:::\n\n\n\nWe can append these new values into `hunan` using `left_join()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, lag.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\n\nWe end this section by plotting the GDPPC and the new Spatial Lag Sum GDPPC values using `qtm()`similar to the previous section\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n## Spatial window average\n\nSpatial window average uses row=standardized weights and includes the diagonal element. This means we need to include the diagonal element in the neighbor list (i.e., include the current unit)\n\nWe can accomplish this by using `include.self()` from **spdep**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs <- include.self(wm_q)\n```\n:::\n\n\n\nIf we inspect the first county using the code chunk below, we see that \"1\" or itself is now included in the list with previously five neighbors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  3  4 57 85\n```\n\n\n:::\n:::\n\n\n\nWe then reobtain wights by using `nb2listw()` on this new matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs <- nb2listw(wm_qs)\nwm_qs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n```\n\n\n:::\n:::\n\n\n\nWe use the next code chunk to create the lag variable using `lag.listw()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n```\n\n\n:::\n:::\n\n\n\nThe code chunk below converts this into a dataframe object using `as.data.frame()` The code includes a relabeling of the columns as seen on the last line\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n```\n:::\n\n\n\nWe append the computed average values into `hunan` using `left_join()` the code chunk below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, lag_wm_qs.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\n\nWe can clearly compare the lag and spatial window averages using `kable()` of the knitr package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan %>%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|County        | lag GDPPC| lag_window_avg GDPPC|geometry                       |\n|:-------------|---------:|--------------------:|:------------------------------|\n|Anxiang       |  24847.20|             24650.50|POLYGON ((112.0625 29.75523... |\n|Hanshou       |  22724.80|             22434.17|POLYGON ((112.2288 29.11684... |\n|Jinshi        |  24143.25|             26233.00|POLYGON ((111.8927 29.6013,... |\n|Li            |  27737.50|             27084.60|POLYGON ((111.3731 29.94649... |\n|Linli         |  27270.25|             26927.00|POLYGON ((111.6324 29.76288... |\n|Shimen        |  21248.80|             22230.17|POLYGON ((110.8825 30.11675... |\n|Liuyang       |  43747.00|             47621.20|POLYGON ((113.9905 28.5682,... |\n|Ningxiang     |  33582.71|             37160.12|POLYGON ((112.7181 28.38299... |\n|Wangcheng     |  45651.17|             49224.71|POLYGON ((112.7914 28.52688... |\n|Anren         |  32027.62|             29886.89|POLYGON ((113.1757 26.82734... |\n|Guidong       |  32671.00|             26627.50|POLYGON ((114.1799 26.20117... |\n|Jiahe         |  20810.00|             22690.17|POLYGON ((112.4425 25.74358... |\n|Linwu         |  25711.50|             25366.40|POLYGON ((112.5914 25.55143... |\n|Rucheng       |  30672.33|             25825.75|POLYGON ((113.6759 25.87578... |\n|Yizhang       |  33457.75|             30329.00|POLYGON ((113.2621 25.68394... |\n|Yongxing      |  31689.20|             32682.83|POLYGON ((113.3169 26.41843... |\n|Zixing        |  20269.00|             25948.62|POLYGON ((113.7311 26.16259... |\n|Changning     |  23901.60|             23987.67|POLYGON ((112.6144 26.60198... |\n|Hengdong      |  25126.17|             25463.14|POLYGON ((113.1056 27.21007... |\n|Hengnan       |  21903.43|             21904.38|POLYGON ((112.7599 26.98149... |\n|Hengshan      |  22718.60|             23127.50|POLYGON ((112.607 27.4689, ... |\n|Leiyang       |  25918.80|             25949.83|POLYGON ((112.9996 26.69276... |\n|Qidong        |  20307.00|             20018.75|POLYGON ((111.7818 27.0383,... |\n|Chenxi        |  20023.80|             19524.17|POLYGON ((110.2624 28.21778... |\n|Zhongfang     |  16576.80|             18955.00|POLYGON ((109.9431 27.72858... |\n|Huitong       |  18667.00|             17800.40|POLYGON ((109.9419 27.10512... |\n|Jingzhou      |  14394.67|             15883.00|POLYGON ((109.8186 26.75842... |\n|Mayang        |  19848.80|             18831.33|POLYGON ((109.795 27.98008,... |\n|Tongdao       |  15516.33|             14832.50|POLYGON ((109.9294 26.46561... |\n|Xinhuang      |  20518.00|             17965.00|POLYGON ((109.227 27.43733,... |\n|Xupu          |  17572.00|             17159.89|POLYGON ((110.7189 28.30485... |\n|Yuanling      |  15200.12|             16199.44|POLYGON ((110.9652 28.99895... |\n|Zhijiang      |  18413.80|             18764.50|POLYGON ((109.8818 27.60661... |\n|Lengshuijiang |  14419.33|             26878.75|POLYGON ((111.5307 27.81472... |\n|Shuangfeng    |  24094.50|             23188.86|POLYGON ((112.263 27.70421,... |\n|Xinhua        |  22019.83|             20788.14|POLYGON ((111.3345 28.19642... |\n|Chengbu       |  12923.50|             12365.20|POLYGON ((110.4455 26.69317... |\n|Dongan        |  14756.00|             15985.00|POLYGON ((111.4531 26.86812... |\n|Dongkou       |  13869.80|             13764.83|POLYGON ((110.6622 27.37305... |\n|Longhui       |  12296.67|             11907.43|POLYGON ((110.985 27.65983,... |\n|Shaodong      |  15775.17|             17128.14|POLYGON ((111.9054 27.40254... |\n|Suining       |  14382.86|             14593.62|POLYGON ((110.389 27.10006,... |\n|Wugang        |  11566.33|             11644.29|POLYGON ((110.9878 27.03345... |\n|Xinning       |  13199.50|             12706.00|POLYGON ((111.0736 26.84627... |\n|Xinshao       |  23412.00|             21712.29|POLYGON ((111.6013 27.58275... |\n|Shaoshan      |  39541.00|             43548.25|POLYGON ((112.5391 27.97742... |\n|Xiangxiang    |  36186.60|             35049.00|POLYGON ((112.4549 28.05783... |\n|Baojing       |  16559.60|             16226.83|POLYGON ((109.7015 28.82844... |\n|Fenghuang     |  20772.50|             19294.40|POLYGON ((109.5239 28.19206... |\n|Guzhang       |  19471.20|             18156.00|POLYGON ((109.8968 28.74034... |\n|Huayuan       |  19827.33|             19954.75|POLYGON ((109.5647 28.61712... |\n|Jishou        |  15466.80|             18145.17|POLYGON ((109.8375 28.4696,... |\n|Longshan      |  12925.67|             12132.75|POLYGON ((109.6337 29.62521... |\n|Luxi          |  18577.17|             18419.29|POLYGON ((110.1067 28.41835... |\n|Yongshun      |  14943.00|             14050.83|POLYGON ((110.0003 29.29499... |\n|Anhua         |  24913.00|             23619.75|POLYGON ((111.6034 28.63716... |\n|Nan           |  25093.00|             24552.71|POLYGON ((112.3232 29.46074... |\n|Yuanjiang     |  24428.80|             24733.67|POLYGON ((112.4391 29.1791,... |\n|Jianghua      |  17003.00|             16762.60|POLYGON ((111.6461 25.29661... |\n|Lanshan       |  21143.75|             20932.60|POLYGON ((112.2286 25.61123... |\n|Ningyuan      |  20435.00|             19467.75|POLYGON ((112.0715 26.09892... |\n|Shuangpai     |  17131.33|             18334.00|POLYGON ((111.8864 26.11957... |\n|Xintian       |  24569.75|             22541.00|POLYGON ((112.2578 26.0796,... |\n|Huarong       |  23835.50|             26028.00|POLYGON ((112.9242 29.69134... |\n|Linxiang      |  26360.00|             29128.50|POLYGON ((113.5502 29.67418... |\n|Miluo         |  47383.40|             46569.00|POLYGON ((112.9902 29.02139... |\n|Pingjiang     |  55157.75|             47576.60|POLYGON ((113.8436 29.06152... |\n|Xiangyin      |  37058.00|             36545.50|POLYGON ((112.9173 28.98264... |\n|Cili          |  21546.67|             20838.50|POLYGON ((110.8822 29.69017... |\n|Chaling       |  23348.67|             22531.00|POLYGON ((113.7666 27.10573... |\n|Liling        |  42323.67|             42115.50|POLYGON ((113.5673 27.94346... |\n|Yanling       |  28938.60|             27619.00|POLYGON ((113.9292 26.6154,... |\n|You           |  25880.80|             27611.33|POLYGON ((113.5879 27.41324... |\n|Zhuzhou       |  47345.67|             44523.29|POLYGON ((113.2493 28.02411... |\n|Sangzhi       |  18711.33|             18127.43|POLYGON ((110.556 29.40543,... |\n|Yueyang       |  29087.29|             28746.38|POLYGON ((113.343 29.61064,... |\n|Qiyang        |  20748.29|             20734.50|POLYGON ((111.5563 26.81318... |\n|Taojiang      |  35933.71|             33880.62|POLYGON ((112.0508 28.67265... |\n|Shaoyang      |  15439.71|             14716.38|POLYGON ((111.5013 27.30207... |\n|Lianyuan      |  29787.50|             28516.22|POLYGON ((111.6789 28.02946... |\n|Hongjiang     |  18145.00|             18086.14|POLYGON ((110.1441 27.47513... |\n|Hengyang      |  21617.00|             21244.50|POLYGON ((112.7144 26.98613... |\n|Guiyang       |  29203.89|             29568.80|POLYGON ((113.0811 26.04963... |\n|Changsha      |  41363.67|             48119.71|POLYGON ((112.9421 28.03722... |\n|Taoyuan       |  22259.09|             22310.75|POLYGON ((112.0612 29.32855... |\n|Xiangtan      |  44939.56|             43151.60|POLYGON ((113.0426 27.8942,... |\n|Dao           |  16902.00|             17133.40|POLYGON ((111.498 25.81679,... |\n|Jiangyong     |  16930.00|             17009.33|POLYGON ((111.3659 25.39472... |\n\n\n:::\n:::\n\n\n\nWe again end by using `qtm()` to compare the individual and the computed average GDPPC values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n\n## Spatial window sum\n\nSimilar to the other section, we can alternatively use a sum instead of a (weighted) average for aggregating the neighbor values\n\nWe again need to use the neighbor matrix with the added the diagonal element.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs <- include.self(wm_q)\nwm_qs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n```\n\n\n:::\n:::\n\n\n\nNext, we assign binary weights to each neighbor (including itself in this case) using the code below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 1 1 1 1 1\n```\n\n\n:::\n:::\n\n\n\nWe then use `nb2listw()` and `glist()` to explcitly assign weights\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n```\n\n\n:::\n:::\n\n\n\nWe can now compute the lag variable using `lag.listw()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n```\n\n\n:::\n:::\n\n\n\nThe code below then converts this into a dataframe object using `as.data.frame()`, and then appends it to hunan using `left_join()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\nhunan <- left_join(hunan, w_sum_gdppc.res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME_3)`\n```\n\n\n:::\n:::\n\n\n\nWe can again compare the differently computed sum variables using `kable()` from knitr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan %>%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|County        | lag_sum GDPPC| w_sum GDPPC|geometry                       |\n|:-------------|-------------:|-----------:|:------------------------------|\n|Anxiang       |        124236|      147903|POLYGON ((112.0625 29.75523... |\n|Hanshou       |        113624|      134605|POLYGON ((112.2288 29.11684... |\n|Jinshi        |         96573|      131165|POLYGON ((111.8927 29.6013,... |\n|Li            |        110950|      135423|POLYGON ((111.3731 29.94649... |\n|Linli         |        109081|      134635|POLYGON ((111.6324 29.76288... |\n|Shimen        |        106244|      133381|POLYGON ((110.8825 30.11675... |\n|Liuyang       |        174988|      238106|POLYGON ((113.9905 28.5682,... |\n|Ningxiang     |        235079|      297281|POLYGON ((112.7181 28.38299... |\n|Wangcheng     |        273907|      344573|POLYGON ((112.7914 28.52688... |\n|Anren         |        256221|      268982|POLYGON ((113.1757 26.82734... |\n|Guidong       |         98013|      106510|POLYGON ((114.1799 26.20117... |\n|Jiahe         |        104050|      136141|POLYGON ((112.4425 25.74358... |\n|Linwu         |        102846|      126832|POLYGON ((112.5914 25.55143... |\n|Rucheng       |         92017|      103303|POLYGON ((113.6759 25.87578... |\n|Yizhang       |        133831|      151645|POLYGON ((113.2621 25.68394... |\n|Yongxing      |        158446|      196097|POLYGON ((113.3169 26.41843... |\n|Zixing        |        141883|      207589|POLYGON ((113.7311 26.16259... |\n|Changning     |        119508|      143926|POLYGON ((112.6144 26.60198... |\n|Hengdong      |        150757|      178242|POLYGON ((113.1056 27.21007... |\n|Hengnan       |        153324|      175235|POLYGON ((112.7599 26.98149... |\n|Hengshan      |        113593|      138765|POLYGON ((112.607 27.4689, ... |\n|Leiyang       |        129594|      155699|POLYGON ((112.9996 26.69276... |\n|Qidong        |        142149|      160150|POLYGON ((111.7818 27.0383,... |\n|Chenxi        |        100119|      117145|POLYGON ((110.2624 28.21778... |\n|Zhongfang     |         82884|      113730|POLYGON ((109.9431 27.72858... |\n|Huitong       |         74668|       89002|POLYGON ((109.9419 27.10512... |\n|Jingzhou      |         43184|       63532|POLYGON ((109.8186 26.75842... |\n|Mayang        |         99244|      112988|POLYGON ((109.795 27.98008,... |\n|Tongdao       |         46549|       59330|POLYGON ((109.9294 26.46561... |\n|Xinhuang      |         20518|       35930|POLYGON ((109.227 27.43733,... |\n|Xupu          |        140576|      154439|POLYGON ((110.7189 28.30485... |\n|Yuanling      |        121601|      145795|POLYGON ((110.9652 28.99895... |\n|Zhijiang      |         92069|      112587|POLYGON ((109.8818 27.60661... |\n|Lengshuijiang |         43258|      107515|POLYGON ((111.5307 27.81472... |\n|Shuangfeng    |        144567|      162322|POLYGON ((112.263 27.70421,... |\n|Xinhua        |        132119|      145517|POLYGON ((111.3345 28.19642... |\n|Chengbu       |         51694|       61826|POLYGON ((110.4455 26.69317... |\n|Dongan        |         59024|       79925|POLYGON ((111.4531 26.86812... |\n|Dongkou       |         69349|       82589|POLYGON ((110.6622 27.37305... |\n|Longhui       |         73780|       83352|POLYGON ((110.985 27.65983,... |\n|Shaodong      |         94651|      119897|POLYGON ((111.9054 27.40254... |\n|Suining       |        100680|      116749|POLYGON ((110.389 27.10006,... |\n|Wugang        |         69398|       81510|POLYGON ((110.9878 27.03345... |\n|Xinning       |         52798|       63530|POLYGON ((111.0736 26.84627... |\n|Xinshao       |        140472|      151986|POLYGON ((111.6013 27.58275... |\n|Shaoshan      |        118623|      174193|POLYGON ((112.5391 27.97742... |\n|Xiangxiang    |        180933|      210294|POLYGON ((112.4549 28.05783... |\n|Baojing       |         82798|       97361|POLYGON ((109.7015 28.82844... |\n|Fenghuang     |         83090|       96472|POLYGON ((109.5239 28.19206... |\n|Guzhang       |         97356|      108936|POLYGON ((109.8968 28.74034... |\n|Huayuan       |         59482|       79819|POLYGON ((109.5647 28.61712... |\n|Jishou        |         77334|      108871|POLYGON ((109.8375 28.4696,... |\n|Longshan      |         38777|       48531|POLYGON ((109.6337 29.62521... |\n|Luxi          |        111463|      128935|POLYGON ((110.1067 28.41835... |\n|Yongshun      |         74715|       84305|POLYGON ((110.0003 29.29499... |\n|Anhua         |        174391|      188958|POLYGON ((111.6034 28.63716... |\n|Nan           |        150558|      171869|POLYGON ((112.3232 29.46074... |\n|Yuanjiang     |        122144|      148402|POLYGON ((112.4391 29.1791,... |\n|Jianghua      |         68012|       83813|POLYGON ((111.6461 25.29661... |\n|Lanshan       |         84575|      104663|POLYGON ((112.2286 25.61123... |\n|Ningyuan      |        143045|      155742|POLYGON ((112.0715 26.09892... |\n|Shuangpai     |         51394|       73336|POLYGON ((111.8864 26.11957... |\n|Xintian       |         98279|      112705|POLYGON ((112.2578 26.0796,... |\n|Huarong       |         47671|       78084|POLYGON ((112.9242 29.69134... |\n|Linxiang      |         26360|       58257|POLYGON ((113.5502 29.67418... |\n|Miluo         |        236917|      279414|POLYGON ((112.9902 29.02139... |\n|Pingjiang     |        220631|      237883|POLYGON ((113.8436 29.06152... |\n|Xiangyin      |        185290|      219273|POLYGON ((112.9173 28.98264... |\n|Cili          |         64640|       83354|POLYGON ((110.8822 29.69017... |\n|Chaling       |         70046|       90124|POLYGON ((113.7666 27.10573... |\n|Liling        |        126971|      168462|POLYGON ((113.5673 27.94346... |\n|Yanling       |        144693|      165714|POLYGON ((113.9292 26.6154,... |\n|You           |        129404|      165668|POLYGON ((113.5879 27.41324... |\n|Zhuzhou       |        284074|      311663|POLYGON ((113.2493 28.02411... |\n|Sangzhi       |        112268|      126892|POLYGON ((110.556 29.40543,... |\n|Yueyang       |        203611|      229971|POLYGON ((113.343 29.61064,... |\n|Qiyang        |        145238|      165876|POLYGON ((111.5563 26.81318... |\n|Taojiang      |        251536|      271045|POLYGON ((112.0508 28.67265... |\n|Shaoyang      |        108078|      117731|POLYGON ((111.5013 27.30207... |\n|Lianyuan      |        238300|      256646|POLYGON ((111.6789 28.02946... |\n|Hongjiang     |        108870|      126603|POLYGON ((110.1441 27.47513... |\n|Hengyang      |        108085|      127467|POLYGON ((112.7144 26.98613... |\n|Guiyang       |        262835|      295688|POLYGON ((113.0811 26.04963... |\n|Changsha      |        248182|      336838|POLYGON ((112.9421 28.03722... |\n|Taoyuan       |        244850|      267729|POLYGON ((112.0612 29.32855... |\n|Xiangtan      |        404456|      431516|POLYGON ((113.0426 27.8942,... |\n|Dao           |         67608|       85667|POLYGON ((111.498 25.81679,... |\n|Jiangyong     |         33860|       51028|POLYGON ((111.3659 25.39472... |\n\n\n:::\n:::\n\n\n\nFinally, we can use `qtm()` and `tmap_arrange()` to show the two different sum variables visually side by side.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-On_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}